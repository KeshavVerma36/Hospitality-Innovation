.zoom-out {
  // Make the zoom-out animation smooth
  animation: zoom-out 0.5s ease-in-out;
}

@keyframes zoom-out {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}

.zoom-in {
  animation: zoom-in 0.5s ease-in-out;
}

@keyframes zoom-in {
  0% {
    transform: scale(0.5);
  }
  100% {
    transform: scale(1);
  }
}

//Header
.net-header {
  z-index: 99999;
}
.header-tag {
  color: white;
  font-weight: 600;
  font-family: var(--para-font);
}
.section-title h2 {
  color: var(--primary-color);
  text-align: center;
  font-weight: 700;
  font-size: 4rem;
  text-transform: uppercase;
  padding: 8rem 0 2rem 0;
}

.desk-menu {
  ul {
    position: relative;
    list-style: none;
    display: flex !important;
    gap: 20px;
    flex-direction: row;
    justify-content: flex-end !important;
    margin: 0;
    padding: 0 15px;
    li {
      padding: 8px 15px 5px 15px;
      font-size: 22px;
      line-height: 1;
      font-weight: 400;
      &:last-child {
        background-color: var(--primary-color);
        font-weight: 600;
        text-transform: uppercase;
        padding: 8px 25px 5px 25px;
        border-radius: 5px;
        a {
          color: var(--card) !important;
        }
      }
      &:hover {
        color: var(--secondary-color);
      }
      a {
        text-decoration: none;
        position: relative;
        padding: 0;
        text-transform: uppercase;
        color: var(--primary-color) !important;
      }
      a::before,
      a::after {
        content: "";
        position: absolute;
        top: 100%;
        height: 1px;
        width: 50%;
        transform: scaleX(0);
        transition: transform 0.6s cubic-bezier(0.19, 1, 0.22, 1);
        background-color: currentcolor;
      }

      /* Position first pseudo-element on the left.*/
      a::before {
        left: 0;
        transform-origin: left;
      }
      /* Position second pseudo-element on the right.*/
      a::after {
        right: 0;
        transform-origin: right;
      }
      /* 1. Scaling up pseudo-elements on hover/active state.*/
      a:active::before,
      a:hover::before,
      a:active::after,
      a:hover::after {
        transform: scaleX(1); /* 1 */
      }
    }
  }
}
.desk-menu ul li a.active {
  color: var(--primary-color) !important;
}
.mobile-menu {
  display: none;
  justify-content: flex-end;
  position: relative;
  i {
    font-size: 28px;
    display: flex;
    align-items: center;
    color: var(--primary-color);
    opacity: 0.5;
  }
  i:hover {
    color: var(--primary-color);
    opacity: 1;
  }
}

.menu-box {
  width: 300px;
  padding: 10px 20px;
  font-family: var(--main-font) !important;
  background-color: var(--primary-dark);
  color: var(--primary-color) !important;
  position: absolute;
  z-index: 999999999999999999;
  top: 75px;
  li {
    a {
      color: var(--primary-color) !important;
      text-transform: uppercase;
    }
  }
}
.dropdown-menu {
  position: relative !important;
  transform: none !important;
  padding: 0 !important;
  border: none !important;
}

/* Hero Section */

.hero-comp {
  height: 100vh;
  overflow: hidden;
  position: relative;
  display: flex;
  justify-content: center;
}
.hero-comp-bg-img {
  height: 100%;
  width: 100%;
  position: relative;
}
.element-wrapper {
  position: absolute;
  bottom: 0;
  .element-box {
    position: relative;
    .elements {
      display: flex;
      justify-content: center;
      position: inherit;
      z-index: 4;
      #element01 {
        width: 40%;
        img {
          height: 100%;
          width: 100%;
          object-fit: contain;
        }
      }
      #element02 {
        width: 40%;
        margin-bottom: -45px;
        img {
          height: 100%;
          width: 100%;
          object-fit: contain;
        }
      }
    }
    .spark {
      position: absolute;
      top: -160px;
      left: 50%;
      transform: translateX(-50%);
      z-index: 3;
    }
  }
}

.hero-comp-bg-img img {
  height: 110%;
  width: 100%;
  object-fit: cover;
  background-position: top;
}

.hero-video {
  width: 100%;
}

.hero-content {
  height: 100%;
  width: 100%;
  position: absolute;
  top: 0;
  z-index: 9;
}
.hero-content-box {
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  span {
    color: var(--primary-color);
    font-size: 1.6rem;
    font-family: var(--main-font);
    text-transform: uppercase;
  }
  h1 {
    font-size: 6rem;
    text-transform: uppercase;
    line-height: 1;
    font-weight: 600;
    color: var(--primary-color);
    text-shadow: 0px 0px 10px var(--primary-dark);
    span {
      font-size: 2.2rem;
      color: white;
      font-weight: 200;
    }
  }
  h4 {
    color: var(--primary-color);
    font-size: 2rem;
    text-transform: uppercase;
    font-weight: 600;
    margin: 0;
  }
  .top-logo {
    height: auto;
    width: 35%;
    margin-bottom: 4rem;
    img {
      height: 100%;
      width: 100%;
      object-fit: contain;
    }
  }
}
.hero-content-box h2 {
  text-align: center;
  color: var(--primary-color);
  font-size: 2rem;
  font-family: Bank Sans;
  font-weight: 500;
  text-transform: uppercase;
  margin-bottom: 3rem;
}

// Timer
.countdown {
  display: flex;
  font-family: var(--para-font);
  text-transform: uppercase;
  background-color: rgb(116, 116, 116);
  padding: 8px 10px;
  clip-path: polygon(
    0 19%,
    4% 0%,
    34% 0,
    38% 15%,
    48% 15%,
    52% 0,
    95% 0,
    100% 19%,
    100% 80%,
    96% 100%,
    76% 100%,
    67% 100%,
    4% 100%,
    0 80%
  );
}
.countdown div {
  text-align: center;
  margin: 0 10px;
}
.countdown span {
  font-size: 32px;
  font-weight: 700;
}

// Hero Button

.glitch-btn,
.glitch-btn::after {
  font-family: var(--main-font);
  text-transform: uppercase;
  letter-spacing: 5px;
  background: linear-gradient(45deg, transparent 5%, var(--primary-color) 5%);
  border: 0;
  color: black;
  padding: 15px 25px;
  box-shadow: 6px 0px 0px var(--secondary-color);
  outline: transparent;
  position: relative;
}

.glitch-btn::after {
  --slice-0: inset(50% 50% 50% 50%);
  --slice-1: inset(80% -6px 0 0);
  --slice-2: inset(50% -6px 30% 0);
  --slice-3: inset(10% -6px 85% 0);
  --slice-4: inset(40% -6px 43% 0);
  --slice-5: inset(80% -6px 5% 0);

  content: "";
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    45deg,
    transparent 3%,
    #00e6f6 3%,
    #00e6f6 5%,
    var(--primary-color) 5%
  );
  text-shadow: -3px -3px 0px #f8f005, 3px 3px 0px #00e6f6;
  clip-path: var(--slice-0);
}

.glitch-btn:hover::after {
  animation: 1s glitch;
  animation-timing-function: steps(2, end);
}

@keyframes glitch {
  0% {
    clip-path: var(--slice-1);
    transform: translate(-20px, -10px);
  }

  10% {
    clip-path: var(--slice-3);
    transform: translate(10px, 10px);
  }

  20% {
    clip-path: var(--slice-1);
    transform: translate(-10px, 10px);
  }

  30% {
    clip-path: var(--slice-3);
    transform: translate(0px, 5px);
  }

  40% {
    clip-path: var(--slice-2);
    transform: translate(-5px, 0px);
  }

  50% {
    clip-path: var(--slice-3);
    transform: translate(5px, 0px);
  }

  60% {
    clip-path: var(--slice-4);
    transform: translate(5px, 10px);
  }

  70% {
    clip-path: var(--slice-2);
    transform: translate(-10px, 10px);
  }

  80% {
    clip-path: var(--slice-5);
    transform: translate(20px, -10px);
  }

  90% {
    clip-path: var(--slice-1);
    transform: translate(-10px, 0px);
  }

  100% {
    clip-path: var(--slice-1);
    transform: translate(0);
  }
}

// Hero Info
.hero-info {
  font-size: 1.2rem;
  font-family: var(--main-font);
  font-weight: 600;
  text-transform: uppercase;
  gap: 30px;
  margin-bottom: 6rem;
  .svg-box {
    position: relative;
    width: 400px;
    border: 1px solid var(--primary-color);
    text-align: center;
    height: 100%;
    padding: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    .info-text {
      padding-left: 35px;
    }
    .svg {
      display: flex;
      align-items: center;
      justify-content: center;
      position: absolute;
      background-color: white;
      top: 0;
      left: 0;
      height: 100%;
      padding: 10px;
    }
  }
  svg {
    color: var(--secondary-color);
  }
}

// Hero Logo
.hero-logo {
  margin-top: 3px;
  img {
    height: 100%;
    width: auto;
  }
}

// Hero Element
.scroll-down {
  bottom: 110px;
  font-size: 14px;
  font-family: var(--main-font);
  position: absolute;
  right: -18px;
  -webkit-transform: rotate(90deg);
  transform: rotate(90deg);
  font-style: italic;
  a {
    text-decoration: none;
    color: var(--primary-color);
  }
}
.hero-socials {
  display: flex;
  position: absolute;
  bottom: 80px;
  flex-direction: column;
  align-items: center;
  gap: 20px;
  a {
    color: var(--primary-color);
  }
}
.hero-socials:after {
  background-color: var(--secondary-color);
  content: "";
  height: 2rem;
  width: 1px;
}

// Hero Glitch

// Here's the meat and potatoes.

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.glitch {
  position: relative;
  /* Animation provies a slight random skew. Check bottom of doc
for more information on how to random skew. */
  animation: glitch-skew 1s infinite linear alternate-reverse;

  // Creates a copy before our text.
  &::before {
    // Duplicates our text with the mixin.
    @include glitchCopy;
    // Scoots text slightly to the left for the color offset.
    left: 2px;
    // Creates the color 'shadow' that happens on the glitch.
    text-shadow: -2px 0 #ff00c1;
    /* Creates an initial clip for our glitch. This works in
  a typical top,right,bottom,left fashion and creates a mask
  to only show a certain part of the glitch at a time. */
    clip: rect(44px, 450px, 56px, 0);
    /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
  with an alternating animation to keep things fresh. */
    animation: glitch-anim 5s infinite linear alternate-reverse;
  }

  // Creates a copy after our text. Note comments from ::before.
  &::after {
    @include glitchCopy;
    left: -2px;
    text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
    animation: glitch-anim2 1s infinite linear alternate-reverse;
  }
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100) + px, 9999px, random(100) + px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100) + px, 9999px, random(100) + px, 0);
      transform: skew((random(100) / 100) + deg);
    }
  }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
  $steps: 10;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      transform: skew((random(10) - 5) + deg);
    }
  }
}
